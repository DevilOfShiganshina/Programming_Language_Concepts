/**
 * Assignment:    Recursive Descent Parser 
 * Author:        Tanjid Shuhag (Tas)
 * Course:        Programming Language Concepts
 * Instructor:    Dr. Kapleau
 * Due Date:      June 23rd, 2019
 */

//===========================================================================================
//                            PREPROCESSOR DIRECTIVES & NAMESPACES
//===========================================================================================

#include <iostream> // Standard input / output
#include <fstream>  // Reading / Writing to files
#include <string>   // Use of string data type

//===========================================================================================
//                                    PROTOTYPES
//===========================================================================================

int A();
int E();
int P(int k);
int L();
int I();
int UI();
int UL();

//===========================================================================================
//                                    GLOBAL VARIABLES
//===========================================================================================

std::string str;
int i, j;

//===========================================================================================
//                                    MAIN
//===========================================================================================

int main()
{
  std::ifstream in;
  in.open("input.txt");
  std::ofstream out;
  out.open("output.txt");

  while (!in.eof()) {
    i = 0;
    j = 0;
    in >> str;
    if (A() != -1 && i == str.length()) {
      out << str << " is in the language!" << std::endl;
    } else {
      out << str << " is not in the language!" << std::endl;
    }
  }

  in.close();
  out.close();

  return 0;
}

//===========================================================================================
//                                    A
//===========================================================================================

int A()
{
  if (I() != -1)
  {
    i = j;
    if (str[i++] == '=')
    {
      if (E() != -1)
      {
        return 0;
      }
    }
    else
    {
      i = 0;
      if (E() != -1)
      {
        return 0;
      }
    }
  }
  else
  {
    i = 0;
    if (E() != -1)
    {
      return 0;
    }
  }
  return -1;
}

//===========================================================================================
//                                    E
//===========================================================================================

int E()
{
  if (P(-1) != -1)
  {
    if (i == str.length())
    {
      return 0;
    }
    else
    {
      if (str[i] == '+' || str[i] == '-' || str[i] == '*' || str[i] == '/')
      {
        i++;
        if (P(1) != -1)
        {
          return 0;
        }
      }
    }
  }

  return -1;
}

//===========================================================================================
//                                    P
//===========================================================================================

int P(int k)
{
  if (I() != -1)
  {
    if (k == -1)
    {
      i = j;
      return 0;
    }
    else
    {
      if (j == str.length())
      {
        i = j;
        return 0;
      }
      else
      {
        return E();
      }
    }
  }

  else if (L() != -1)
  {
    if (k == -1)
    {
      i = j;
      return 0;
    }
    else
    {
      if (j == str.length())
      {
        i = j;
        return 0;
      }
      else
      {
        return E();
      }
    }
  }

  else if (UI() != -1)
  {
    if (k == -1)
    {
      i = j;
      return 0;
    }
    else
    {
      if (j == str.length())
      {
        i = j;
        return 0;
      }
      else
      {
        return E();
      }
    }
  }

  else if (UL() != -1)
  {
    if (k == -1)
    {
      i = j;
      return 0;
    }
    else
    {
      if (j == str.length())
      {
        i = j;
        return 0;
      }
      else
      {
        return E();
      }
    }
  }

  else if (k == 1)
  {
    return E();
  }

  else
  {
    return -1;
  }

  return -1;
}

//===========================================================================================
//                                    L
//===========================================================================================
int L()
{
  j = i;

  while (j < str.length())
  {
    if (str[j] >= '0' && str[j] <= '9')
    {
      j++;
    }
    else
    {
      break;
    }
  }
  if (j == i)
  {
    return -1;
  }
  else
  {
    return 0;
  }
}

//===========================================================================================
//                                    I
//===========================================================================================

int I()
{
  j = i;
  while (j < str.length())
  {
    if (str[j] >= 'a' && str[j] <= 'z')
    {
      j++;
    }
    else
    {
      break;
    }
  }

  if (j == i)
  {
    return -1;
  }
  else
  {
    return 0;
  }
}

//===========================================================================================
//                                    UI
//===========================================================================================

int UI()
{
  j = i;
  int x = i;

  if (j < str.length() && (str[j] == '+' || str[j] == '-' || str[j] == '!'))
  {
    j++;
    i = j;
    if (I() != -1)
    {
      i = j;
      return 0;
    }
  }

  i = x;
  return -1;
}

//===========================================================================================
//                                    UL
//===========================================================================================

int UL() {
  j = i;
  int x = i;

  if (j < str.length() && (str[j] == '+' || str[j] == '-' || str[j] == '!')) {
    j++;
    i = j;
    if (L() != -1) {
      i = j;
      return 0;
    }
  }

  i = x;
  return -1;
}